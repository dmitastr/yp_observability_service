// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dmitastr/yp_observability_service/internal/domain/service_interface (interfaces: ServiceAbstract)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/dmitastr/yp_observability_service/internal/domain/entity"
	models "github.com/dmitastr/yp_observability_service/internal/model"
	update "github.com/dmitastr/yp_observability_service/internal/presentation/update"
	gomock "github.com/golang/mock/gomock"
)

// MockServiceAbstract is a mock of ServiceAbstract interface.
type MockServiceAbstract struct {
	ctrl     *gomock.Controller
	recorder *MockServiceAbstractMockRecorder
}

// MockServiceAbstractMockRecorder is the mock recorder for MockServiceAbstract.
type MockServiceAbstractMockRecorder struct {
	mock *MockServiceAbstract
}

// NewMockServiceAbstract creates a new mock instance.
func NewMockServiceAbstract(ctrl *gomock.Controller) *MockServiceAbstract {
	mock := &MockServiceAbstract{ctrl: ctrl}
	mock.recorder = &MockServiceAbstractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceAbstract) EXPECT() *MockServiceAbstractMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockServiceAbstract) GetAll(arg0 context.Context) ([]entity.DisplayMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]entity.DisplayMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockServiceAbstractMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockServiceAbstract)(nil).GetAll), arg0)
}

// GetMetric mocks base method.
func (m *MockServiceAbstract) GetMetric(arg0 context.Context, arg1 update.MetricUpdate) (*models.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetric", arg0, arg1)
	ret0, _ := ret[0].(*models.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetric indicates an expected call of GetMetric.
func (mr *MockServiceAbstractMockRecorder) GetMetric(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetric", reflect.TypeOf((*MockServiceAbstract)(nil).GetMetric), arg0, arg1)
}

// Ping mocks base method.
func (m *MockServiceAbstract) Ping(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockServiceAbstractMockRecorder) Ping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockServiceAbstract)(nil).Ping), arg0)
}

// ProcessUpdate mocks base method.
func (m *MockServiceAbstract) ProcessUpdate(arg0 context.Context, arg1 update.MetricUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessUpdate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessUpdate indicates an expected call of ProcessUpdate.
func (mr *MockServiceAbstractMockRecorder) ProcessUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessUpdate", reflect.TypeOf((*MockServiceAbstract)(nil).ProcessUpdate), arg0, arg1)
}
